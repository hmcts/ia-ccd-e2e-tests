#!groovy

properties([
    pipelineTriggers([cron('H 13 * * 1-5')]),
    parameters([
        string(name: 'URL_TO_TEST', defaultValue: 'https://manage-case.aat.platform.hmcts.net', description: 'The URL you want to run these tests against'),
        string(name: 'CCD_GATEWAY_URL', defaultValue: 'https://gateway-ccd.aat.platform.hmcts.net', description: 'The CCD Gateway URL these tests will need to run'),
        string(name: 'NUM_TESTS_IN_PARALLEL', defaultValue: '4', description: 'The number of tests to run in parallel'),
        string(name: 'NIGHTLY_TAG', defaultValue: '--cucumberOpts.tags=@nightly-test', description: 'Tag for nightly build'),
    ])
])

@Library("Infrastructure")

def product = "ia"
def component = "ccd-e2e-tests"

def secrets = [
    'ia-aat': [
        secret('test-caseofficer-username', 'TEST_CASEOFFICER_USERNAME'),
        secret('test-caseofficer-password', 'TEST_CASEOFFICER_PASSWORD'),
        secret('test-law-firm-a-username', 'TEST_LAW_FIRM_A_USERNAME'),
        secret('test-law-firm-a-password', 'TEST_LAW_FIRM_A_PASSWORD'),
        secret('test-law-firm-b-username', 'TEST_LAW_FIRM_B_USERNAME'),
        secret('test-law-firm-b-password', 'TEST_LAW_FIRM_B_PASSWORD'),
        secret('test-law-firm-c-username', 'TEST_LAW_FIRM_C_USERNAME'),
        secret('test-law-firm-c-password', 'TEST_LAW_FIRM_C_PASSWORD'),
        secret('test-adminofficer-username', 'TEST_ADMINOFFICER_USERNAME'),
        secret('test-adminofficer-password', 'TEST_ADMINOFFICER_PASSWORD'),

        secret('test-homeoffice-apc-username', 'TEST_HOMEOFFICE_APC_USERNAME'),
        secret('test-homeoffice-apc-password', 'TEST_HOMEOFFICE_APC_PASSWORD'),
        secret('test-homeoffice-lart-username', 'TEST_HOMEOFFICE_LART_USERNAME'),
        secret('test-homeoffice-lart-password', 'TEST_HOMEOFFICE_LART_PASSWORD'),
        secret('test-homeoffice-pou-username', 'TEST_HOMEOFFICE_POU_USERNAME'),
        secret('test-homeoffice-pou-password', 'TEST_HOMEOFFICE_POU_PASSWORD'),
        secret('test-homeoffice-generic-username', 'TEST_HOMEOFFICE_GENERIC_USERNAME'),
        secret('test-homeoffice-generic-password', 'TEST_HOMEOFFICE_GENERIC_PASSWORD'),
        secret('test-homeoffice-bail-username', 'TEST_HOMEOFFICE_BAILS_USERNAME'),
        secret('test-homeoffice-bail-password', 'TEST_HOMEOFFICE_BAILS_PASSWORD'),
        secret('test-law-firm-share-case-a-username', 'TEST_LAW_FIRM_SHARE_CASE_A_USERNAME'),
        secret('test-law-firm-share-case-b-password', 'TEST_LAW_FIRM_SHARE_CASE_B_PASSWORD'),
        secret('test-law-firm-share-case-b-username', 'TEST_LAW_FIRM_SHARE_CASE_B_USERNAME'),
        secret('test-law-firm-share-case-a-password', 'TEST_LAW_FIRM_SHARE_CASE_A_PASSWORD'),
        secret('test-law-firm-org-deleted-username', 'TEST_LAW_FIRM_SHARE_CASE_C_USERNAME'),
        secret('test-law-firm-org-deleted-password', 'TEST_LAW_FIRM_SHARE_CASE_C_PASSWORD'),
        secret('test-law-firm-org-success-username', 'TEST_LAW_FIRM_ORG_SUCCESS_USERNAME'),
        secret('test-law-firm-org-success-password', 'TEST_LAW_FIRM_ORG_SUCCESS_PASSWORD'),
        secret('test-judge-x-username', 'TEST_JUDGE_X_USERNAME'),
        secret('test-judge-x-password', 'TEST_JUDGE_X_PASSWORD'),

        secret('test-adminofficer-bails-username', 'TEST_ADMINOFFICER_BAILS_USERNAME'),
        secret('test-adminofficer-bails-password', 'TEST_ADMINOFFICER_BAILS_PASSWORD'),
        secret('test-judge-bails-username', 'TEST_JUDGE_X_BAILS_USERNAME'),
        secret('test-judge-bails-password', 'TEST_JUDGE_X_BAILS_PASSWORD'),
        secret('test-law-firm-noc-a-bails-username', 'TEST_LAW_FIRM_SHARE_CASE_A_BAILS_USERNAME'),
        secret('test-law-firm-noc-a-bails-password', 'TEST_LAW_FIRM_SHARE_CASE_A_BAILS_PASSWORD'),
        secret('test-law-firm-noc-b-bails-username', 'TEST_LAW_FIRM_SHARE_CASE_B_BAILS_USERNAME'),
        secret('test-law-firm-noc-b-bails-password', 'TEST_LAW_FIRM_SHARE_CASE_B_BAILS_PASSWORD')
    ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [$class     : 'AzureKeyVaultSecret',
     secretType : 'Secret',
     name       : secretName,
     version    : '',
     envVariable: envVar
    ]
}

withNightlyPipeline("nodejs", product, component) {

    loadVaultSecrets(secrets)

    env.TEST_E2E_URL_WEB = params.URL_TO_TEST
    env.TEST_E2E_URL_GATEWAY = params.CCD_GATEWAY_URL
    env.TEST_E2E_NUM_BROWSERS = params.NUM_TESTS_IN_PARALLEL
    env.TEST_E2E_WAIT_FOR_ANGULAR = 'false'
    env.TEST_E2E_FAIL_FAST = 'false'
    env.TEST_E2E_ANNOTATION = params.NIGHTLY_TAG
//    enableCrossBrowserTest()
    enableFullFunctionalTest(240)

    afterAlways('crossBrowserTest') {
        publishHTML([
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "reports/tests/crossbrowser/",
            reportFiles          : 'index.html',
            reportName           : 'IA Service Cross Browser Tests'
        ])
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'reports/tests-results/crossbrowser/*'
    }

    afterAlways('fullFunctionalTest') {
        publishHTML([
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "reports/tests/functional/",
            reportFiles          : 'index.html',
            reportName           : 'IAC - Manage Cases Functional Test'
        ])
        script {
            def jsonContent = readJSON file: 'reports/tests/functional/enriched-output.json'
            def passedPercentage = jsonContent.scenarios.passedPercentage

            if (passedPercentage == "100.00") {
                currentBuild.setResult('SUCCESS')
            }
        }
//        withGroovy {
//            def jsonContent = readJSON file: 'reports/tests/functional/enriched-output.json'
//            def passedPercentage = jsonContent.scenarios.passedPercentage
//
//            if (passedPercentage == "100.00") {
//                currentBuild.currentResult = 'SUCCESS'
//            }
//        }
//        sh '''
//            jsonContent=\$(cat reports/tests/functional/enriched-output.json)
//            passedPercentage=\$(echo "$jsonContent" | jq -r '.scenarios.passedPercentage')
//            if [ "$passedPercentage" == "100.00" ]; then
//                echo "Setting currentBuild.currentResult to SUCCESS"
//                export currentBuild_currentResult="SUCCESS"
//            else
//                echo "Passed percentage is not 100.00. Doing nothing."
//            fi
//        '''

        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'reports/tests-results/functional/*'

        publishHTML([
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "reports/tests/",
            reportFiles          : 'a11y.html',
            reportName           : 'IAC - Manage Cases a11y Test Report'
        ])
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'reports/a11y-results/functional/*'

    }

    enableSlackNotifications('#ia-tech')
}
