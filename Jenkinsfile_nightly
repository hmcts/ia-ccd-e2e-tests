#!groovy

properties([
    pipelineTriggers([cron('H 8 * * 1-5')]),
    parameters([
        booleanParam(name: 'skipCrossBrowserTests', defaultValue: false, description: 'Tick the checkbox for skip'),
        booleanParam(name: 'skipAppealFunctionalTests', defaultValue: false, description: 'Tick the checkbox for skip'),
        booleanParam(name: 'skipBailFunctionalTests', defaultValue: false, description: 'Tick the checkbox for skip'),
        string(name: 'URL_TO_TEST', defaultValue: 'https://manage-case.aat.platform.hmcts.net', description: 'The URL you want to run these tests against'),
        string(name: 'CCD_GATEWAY_URL', defaultValue: 'https://gateway-ccd.aat.platform.hmcts.net', description: 'The CCD Gateway URL these tests will need to run'),
        string(name: 'NUM_TESTS_IN_PARALLEL', defaultValue: '4', description: 'The number of tests to run in parallel'),
        string(name: 'RETRIES', defaultValue: '5', description: 'The number of retries to set for tests'),
        string(name: 'SPECIFIC_TAGS', defaultValue: '', description: 'Tag for a specific run of tests'),
    ])
])

@Library("Infrastructure")

def product = "ia"
def component = "ccd-e2e-tests"

def secrets = [
    'ia-aat': [
        secret('test-caseofficer-username', 'TEST_CASEOFFICER_USERNAME'),
        secret('test-caseofficer-password', 'TEST_CASEOFFICER_PASSWORD'),
        secret('test-law-firm-a-username', 'TEST_LAW_FIRM_A_USERNAME'),
        secret('test-law-firm-a-password', 'TEST_LAW_FIRM_A_PASSWORD'),
        secret('test-law-firm-b-username', 'TEST_LAW_FIRM_B_USERNAME'),
        secret('test-law-firm-b-password', 'TEST_LAW_FIRM_B_PASSWORD'),
        secret('test-law-firm-c-username', 'TEST_LAW_FIRM_C_USERNAME'),
        secret('test-law-firm-c-password', 'TEST_LAW_FIRM_C_PASSWORD'),
        secret('test-adminofficer-username', 'TEST_ADMINOFFICER_USERNAME'),
        secret('test-adminofficer-password', 'TEST_ADMINOFFICER_PASSWORD'),

        secret('test-homeoffice-apc-username', 'TEST_HOMEOFFICE_APC_USERNAME'),
        secret('test-homeoffice-apc-password', 'TEST_HOMEOFFICE_APC_PASSWORD'),
        secret('test-homeoffice-lart-username', 'TEST_HOMEOFFICE_LART_USERNAME'),
        secret('test-homeoffice-lart-password', 'TEST_HOMEOFFICE_LART_PASSWORD'),
        secret('test-homeoffice-pou-username', 'TEST_HOMEOFFICE_POU_USERNAME'),
        secret('test-homeoffice-pou-password', 'TEST_HOMEOFFICE_POU_PASSWORD'),
        secret('test-homeoffice-generic-username', 'TEST_HOMEOFFICE_GENERIC_USERNAME'),
        secret('test-homeoffice-generic-password', 'TEST_HOMEOFFICE_GENERIC_PASSWORD'),
        secret('test-homeoffice-bail-username', 'TEST_HOMEOFFICE_BAILS_USERNAME'),
        secret('test-homeoffice-bail-password', 'TEST_HOMEOFFICE_BAILS_PASSWORD'),
        secret('test-law-firm-share-case-a-username', 'TEST_LAW_FIRM_SHARE_CASE_A_USERNAME'),
        secret('test-law-firm-share-case-b-password', 'TEST_LAW_FIRM_SHARE_CASE_B_PASSWORD'),
        secret('test-law-firm-share-case-b-username', 'TEST_LAW_FIRM_SHARE_CASE_B_USERNAME'),
        secret('test-law-firm-share-case-a-password', 'TEST_LAW_FIRM_SHARE_CASE_A_PASSWORD'),
        secret('test-law-firm-org-deleted-username', 'TEST_LAW_FIRM_SHARE_CASE_C_USERNAME'),
        secret('test-law-firm-org-deleted-password', 'TEST_LAW_FIRM_SHARE_CASE_C_PASSWORD'),
        secret('test-law-firm-org-success-username', 'TEST_LAW_FIRM_ORG_SUCCESS_USERNAME'),
        secret('test-law-firm-org-success-password', 'TEST_LAW_FIRM_ORG_SUCCESS_PASSWORD'),
        secret('test-judge-x-username', 'TEST_JUDGE_X_USERNAME'),
        secret('test-judge-x-password', 'TEST_JUDGE_X_PASSWORD'),

        secret('test-adminofficer-bails-username', 'TEST_ADMINOFFICER_BAILS_USERNAME'),
        secret('test-adminofficer-bails-password', 'TEST_ADMINOFFICER_BAILS_PASSWORD'),
        secret('test-judge-bails-username', 'TEST_JUDGE_X_BAILS_USERNAME'),
        secret('test-judge-bails-password', 'TEST_JUDGE_X_BAILS_PASSWORD'),
        secret('test-law-firm-noc-a-bails-username', 'TEST_LAW_FIRM_SHARE_CASE_A_BAILS_USERNAME'),
        secret('test-law-firm-noc-a-bails-password', 'TEST_LAW_FIRM_SHARE_CASE_A_BAILS_PASSWORD'),
        secret('test-law-firm-noc-b-bails-username', 'TEST_LAW_FIRM_SHARE_CASE_B_BAILS_USERNAME'),
        secret('test-law-firm-noc-b-bails-password', 'TEST_LAW_FIRM_SHARE_CASE_B_BAILS_PASSWORD')
    ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [$class     : 'AzureKeyVaultSecret',
     secretType : 'Secret',
     name       : secretName,
     version    : '',
     envVariable: envVar
    ]
}

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

withNightlyPipeline("nodejs", product, component) {
    loadVaultSecrets(secrets)

    env.TEST_E2E_URL_WEB = params.URL_TO_TEST
    env.RETRIES = params.RETRIES
    env.TEST_E2E_URL_GATEWAY = params.CCD_GATEWAY_URL
    env.TEST_E2E_NUM_BROWSERS = params.NUM_TESTS_IN_PARALLEL
    env.TEST_E2E_WAIT_FOR_ANGULAR = 'false'
    env.TEST_E2E_FAIL_FAST = 'false'
    env.TEST_E2E_ANNOTATION = params.NIGHTLY_TAG
    env.TESTS_FOR_ACCESSIBILITY = 'true'
    afterAlways('DependencyCheckNightly') {
        if (!params.skipAppealFunctionalTests) {
            stage('Appeal Full Functional Tests') {
                try {
                    yarnBuilder.yarn("test:appealFullfunctional")
                } catch (Error) {
                    unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
                } finally {
                    if (params.skipBailFunctionalTests) {
                        publishHTML([
                                allowMissing         : true,
                                alwaysLinkToLastBuild: true,
                                keepAll              : true,
                                reportDir            : "reports/tests/functional/",
                                reportFiles          : 'index.html',
                                reportName           : 'IAC - Appeal E2E Test Report'
                        ])
                    }
                    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'reports/tests/functional/*'
                    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'reports/tests/failedScreenshots/**/*.png'
                    publishHTML([
                            allowMissing         : true,
                            alwaysLinkToLastBuild: true,
                            keepAll              : true,
                            reportDir            : "undefined/",
                            reportFiles          : 'a11y.html',
                            reportName           : 'IAC - Appeal a11y Test Report'
                    ])
                }
            }
        }
        if (!params.skipBailFunctionalTests) {
            stage('Bail Full Functional Tests') {
                try {
                    yarnBuilder.yarn("test:bailFullfunctional")
                } catch (Error) {
                    unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
                } finally {
                    publishHTML([
                            allowMissing         : true,
                            alwaysLinkToLastBuild: true,
                            keepAll              : true,
                            reportDir            : "reports/tests/functional/",
                            reportFiles          : 'index.html',
                            reportName           : params.skipAppealFunctionalTests ? 'IAC - Bail E2E Test Report' : 'IAC - Appeal and Bails E2E Test Report'
                    ])
                    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'reports/tests/functional/*'
                    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'reports/tests/failedScreenshots/**/*.png'
                    publishHTML([
                            allowMissing         : true,
                            alwaysLinkToLastBuild: true,
                            keepAll              : true,
                            reportDir            : "reports/tests/",
                            reportFiles          : 'a11y.html',
                            reportName           : 'IAC - Bail a11y Test Report'
                    ])
                }
            }
        }
        if (params.SPECIFIC_TAGS != '') {
            stage('Specifically Tagged Full Functional Tests') {
                try {
                    yarnBuilder.yarn("test:setupFunctional")
                    script {
                        sh "node e2e/cucumberTagSearcher.js ${params.SPECIFIC_TAGS}; yarn protractor e2e/features.parallel.linux.conf.js --cucumberOpts.tags=${params.SPECIFIC_TAGS}"
                    }
                } catch (Error) {
                    // unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
                } finally {
                    publishHTML([
                            allowMissing         : true,
                            alwaysLinkToLastBuild: true,
                            keepAll              : true,
                            reportDir            : "reports/tests/functional/",
                            reportFiles          : 'index.html',
                            reportName           : "IAC - ${params.SPECIFIC_TAGS} E2E Test Report"
                    ])
                    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'reports/tests/failedScreenshots/**/*.png'
                }
            }
        }
    }

    if (!params.skipCrossBrowserTests) {
        enableCrossBrowserTest()
        afterAlways('crossBrowserTest') {
            publishHTML([
                    allowMissing         : true,
                    alwaysLinkToLastBuild: true,
                    keepAll              : true,
                    reportDir            : "reports/tests/crossbrowser/",
                    reportFiles          : 'index.html',
                    reportName           : 'IA Service Cross Browser Tests'
            ])
            steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'reports/tests/crossbrowser/*'
        }
    }

    enableSlackNotifications('#ia-tech')
}
